#include <stdio.h>
#include <stdlib.h>

// Function Prototypes
void printBoard(int n, int **board);
void freeBoard(int n, int **board);
int **newBoard(int n);
int moveR(int level, int x, int y, int n, int **board);  // Added n parameter

// Arrays representing possible moves for a knight
int moveRow[] = {2, 1, -1, -2, -2, -1, 1, 2};
int moveCol[] = {1, 2, 2, 1, -1, -2, -2, -1};

// Main Function
int main() {
    int i, j, n;

    printf("Enter the size of the chessboard n = ");
    scanf("%d", &n);

    int **board = newBoard(n);

    fprintf(stdout, "Initial position?\n");
    scanf("%d%d", &i, &j);

    // I'm here
    board[i][j] = 1;
    if (moveR(2, i, j, n, board)) {
        printBoard(n, board);
    } else {
        fprintf(stderr, "Solution not found!\n");
    }

    // Free memory for the board
    freeBoard(n, board);

    return EXIT_SUCCESS;
}

int moveR(int level, int x, int y, int n, int **board) {
    int i, xx, yy;

    if (level == n * n + 1) {
        return 1;
    }

    for (i = 0; i < 8; i++) {
        xx = x + moveRow[i];
        yy = y + moveCol[i];

        // Within the board
        if (xx < n && xx >= 0 && yy < n && yy >= 0) {
            if (board[xx][yy] == 0) {
                board[xx][yy] = level;
            }
            if (moveR(level + 1, xx, yy, n, board)) {
                return 1;
            }
            // Backtrack
            board[xx][yy] = 0;
        }
    }

    return 0;
}

void printBoard(int n, int **board) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%3d ", board[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}

int **newBoard(int n) {
    int i, j;

    int **board = (int **)malloc(n * sizeof(int *));
    for (i = 0; i < n; i++) {
        board[i] = (int *)malloc(n * sizeof(int));
        for (j = 0; j < n; j++) {
            board[i][j] = 0;
        }
    }
    return board;
}

void freeBoard(int n, int **board) {
    for (int i = 0; i < n; i++) {
        free(board[i]);
    }
    free(board);
}
